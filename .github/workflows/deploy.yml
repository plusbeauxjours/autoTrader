name: 🚀 Auto Deploy Bot to Azure VM

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v3

      - name: 📨 Validate Slack Webhook
        run: |
          echo ">>> Slack webhook 검증 시작"
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "❌ SLACK_WEBHOOK_URL 환경 변수가 설정되지 않았습니다!"
            exit 1
          fi

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H 'Content-type: application/json' \
            --data '{"text":"🚧 GitHub Actions: Slack 웹훅 검증 테스트"}' \
            "${{ secrets.SLACK_WEBHOOK_URL }}")
            
          echo "Slack webhook response status: $STATUS"
          if [ "$STATUS" -ne 200 ]; then
            echo "❌ Slack webhook 테스트 실패! 응답 코드: $STATUS"
            exit 1
          fi
          echo "✅ Slack webhook 검증 완료"

      - name: 🔐 Set up SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H 4.230.11.18 >> ~/.ssh/known_hosts

      - name: 📦 Sync code to Azure VM
        run: |
          rsync -avz --exclude '.git' ./ azureuser@4.230.11.18:/home/azureuser/autoTrader

      - name: 📄 Write .env file to Azure VM
        run: |
          ssh azureuser@4.230.11.18 "cat > /home/azureuser/autoTrader/.env <<'EOT'
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}
          BINANCE_API_SECRET=${{ secrets.BINANCE_API_SECRET }}
          TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}
          EOT"

          # 환경 변수 파일 권한 및 내용 확인
          ssh azureuser@4.230.11.18 "
            chmod 600 /home/azureuser/autoTrader/.env &&
            echo '>>> .env 파일 확인:' &&
            cat /home/azureuser/autoTrader/.env | grep -v SECRET | grep -v KEY
          "

      - name: 📦 Set up Python and install dependencies
        run: |
          ssh azureuser@4.230.11.18 "
            cd /home/azureuser/autoTrader &&
            python3 -m venv venv &&
            source venv/bin/activate &&
            pip install --upgrade pip &&
            pip install -r requirements.txt python-dotenv
          "

      - name: ✅ Verify TA-Lib (via `ta` package)
        run: |
          ssh azureuser@4.230.11.18 "
            source /home/azureuser/autoTrader/venv/bin/activate &&
            python -c 'import ta; print(\"✅ Technical Analysis library installed successfully\")'
          "

      - name: 🔍 Test Slack Notification
        run: |
          ssh azureuser@4.230.11.18 "
            cd /home/azureuser/autoTrader &&
            source venv/bin/activate &&
            python3 -c 'import os; from dotenv import load_dotenv; import requests; load_dotenv(\".env\"); url = os.getenv(\"SLACK_WEBHOOK_URL\"); print(f\"SLACK_WEBHOOK_URL: {url[:30]}...\"); r = requests.post(url, json={\"text\": \"[TEST] Notification from Azure VM\"}); print(f\"Status: {r.status_code}\")'
          "

        - name: 🔁 Restart Bot
        run: |
          ssh azureuser@4.230.11.18 << 'EOF'
            set -xe  # (디버깅용) 실행되는 명령을 모두 출력합니다
            pkill -f main.py || true
            cd /home/azureuser/autoTrader
            source venv/bin/activate
            # nohup으로 백그라운드 실행하고, PID와 ps 상태를 로그에 남김
            /usr/bin/nohup python3 main.py > bot.log 2>&1 &
            echo "LAUNCHED PID=$!" >> bot.log
            ps -f -p $! >> bot.log || echo "PID $! not found" >> bot.log
          EOF

      - name: 🔍 Check if Bot is Running
        run: |
          ssh azureuser@4.230.11.18 "
            pgrep -f main.py || (echo '❌ Bot not running' && exit 1)
          "

      - name: ⏲️ Wait for bot initialization
        run: sleep 10

      - name: 📨 Test Slack directly with curl
        run: |
          ssh azureuser@4.230.11.18 "
            echo '>>> Slack webhook 직접 테스트' &&
            echo 'Webhook URL: ${SLACK_WEBHOOK_URL:0:20}...' &&
            curl -v \
              -H 'Content-type: application/json' \
              -d '{\"text\":\"🚀 GitHub Actions: Slack 테스트 메시지\"}' \
              '$SLACK_WEBHOOK_URL'
          "
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🐛 Dump bot.log
        run: |
          ssh azureuser@4.230.11.18 << 'EOF'
            echo '>>> 최신 봇 로그:'
            tail -n 30 /home/azureuser/autoTrader/bot.log || echo 'no bot.log found'
          EOF

      - name: 🎉 Done!
        run: echo "🎯 Bot deployed and running live on Azure VM! 🚀"
